import json
from telegram import Update
from telegram.ext import ContextTypes

from core.scene_manager.scene_manager import SceneManager
from core.utils.logger import safe_logger

logger = safe_logger(__name__)

# Inicializa el manejador global del SceneManager
scene_manager = SceneManager()


# ============================================================
# /save ‚Äì guarda el progreso actual de la sesi√≥n
# ============================================================
async def save_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        if len(context.args) == 0:
            await update.message.reply_text("‚ùó Debes indicar el ID de sesi√≥n. Ejemplo: `/save <session_id>`", parse_mode="Markdown")
            return

        session_id = context.args[0]
        session = scene_manager.load_session(session_id)

        if not session:
            await update.message.reply_text(f"‚ö†Ô∏è No se encontr√≥ la sesi√≥n `{session_id}`", parse_mode="Markdown")
            return

        scene_manager.save_progress(session)
        await update.message.reply_text(f"‚úÖ Progreso de la sesi√≥n `{session_id}` guardado correctamente.", parse_mode="Markdown")

    except Exception as e:
        logger.exception("Error en /save:")
        await update.message.reply_text(f"‚ùå Error al guardar sesi√≥n: {str(e)}", parse_mode="Markdown")


# ============================================================
# /load ‚Äì carga una sesi√≥n guardada
# ============================================================
async def load_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        if len(context.args) == 0:
            await update.message.reply_text("‚ùó Debes indicar el ID de sesi√≥n. Ejemplo: `/load <session_id>`", parse_mode="Markdown")
            return

        session_id = context.args[0]
        session = scene_manager.load_session(session_id)

        if not session:
            await update.message.reply_text(f"‚ö†Ô∏è No se encontr√≥ la sesi√≥n `{session_id}`", parse_mode="Markdown")
            return

        text = f"üéÆ Sesi√≥n `{session_id}` cargada.\n\nEscena actual: `{session.get('current_scene_id', 'N/A')}`"
        await update.message.reply_text(text, parse_mode="Markdown")

    except Exception as e:
        logger.exception("Error en /load:")
        await update.message.reply_text(f"‚ùå Error al cargar sesi√≥n: {str(e)}", parse_mode="Markdown")


# ============================================================
# /scene ‚Äì muestra informaci√≥n de la escena actual
# ============================================================
async def scene_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        if len(context.args) == 0:
            await update.message.reply_text("‚ùó Usa `/scene <scene_id>` para ver detalles.", parse_mode="Markdown")
            return

        scene_id = context.args[0]
        scene = scene_manager.load_scene(scene_id)

        if not scene:
            await update.message.reply_text(f"‚ö†Ô∏è No se encontr√≥ la escena `{scene_id}`", parse_mode="Markdown")
            return

        # Construir una vista resumida de la escena
        summary = f"üé≠ *{scene.get('title', 'Sin t√≠tulo')}*\n"
        summary += f"\n{scene.get('description', 'Sin descripci√≥n disponible.')}\n"
        summary += f"\nüåç Tipo: `{scene.get('scene_type', 'N/A')}` | Estado: `{scene.get('status', 'N/A')}`"
        summary += f"\nüéØ Objetivos: {len(scene.get('objectives', []))}"
        summary += f"\nüé≤ Acciones disponibles: {len(scene.get('available_actions', []))}"

        await update.message.reply_text(summary, parse_mode="Markdown")

    except Exception as e:
        logger.exception("Error en /scene:")
        await update.message.reply_text(f"‚ùå Error al mostrar escena: {str(e)}", parse_mode="Markdown")
