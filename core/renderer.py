# ================================================================
# ðŸª„ SAM â€“ Renderer (Modo CampaÃ±a Pre-Creada)
# ================================================================
# Convierte los datos narrativos generados por el Orchestrator
# en texto limpio y presentable para el usuario (Telegram).
# ================================================================

import textwrap
import logging

logger = logging.getLogger(__name__)

# ------------------------------------------------
# ðŸ”§ FunciÃ³n principal
# ------------------------------------------------
def render(scene_description: str, tone: str = "neutral", emotion: str = "neutral") -> str:
    """
    Recibe un bloque narrativo y lo adapta a formato jugable.
    Ajusta estilo y tono segÃºn la emociÃ³n dominante.
    """

    if not scene_description:
        return "Silencioâ€¦ (no hay descripciÃ³n disponible)."

    # Normalizar texto
    scene_description = scene_description.strip()
    scene_description = textwrap.fill(scene_description, width=100)

    # Adaptar segÃºn tono o emociÃ³n global
    tone_prefix = {
        "hopeful": "âœ¨ Con un aire de esperanza,",
        "dark": "ðŸŒ’ La atmÃ³sfera se vuelve sombrÃ­a:",
        "tense": "âš¡ Una tensiÃ³n invisible recorre el ambiente:",
        "calm": "ðŸŒ¿ En calma y silencio,",
        "neutral": ""
    }.get(tone, "")

    emotion_suffix = {
        "joy": "ðŸ˜Š Un leve optimismo se percibe entre los aventureros.",
        "fear": "ðŸ˜¨ Un escalofrÃ­o recorre sus espaldas.",
        "anger": "ðŸ”¥ La frustraciÃ³n late en cada respiraciÃ³n.",
        "sadness": "ðŸ˜” El silencio pesa sobre sus corazones.",
        "surprise": "ðŸ˜² Todo ocurre mÃ¡s rÃ¡pido de lo esperado.",
        "neutral": ""
    }.get(emotion, "")

    output = f"{tone_prefix} {scene_description} {emotion_suffix}".strip()
    logger.info(f"[Renderer] Escena renderizada con tono='{tone}', emociÃ³n='{emotion}'")
    return output


# ------------------------------------------------
# ðŸ§© Compatibilidad con Orchestrator
# ------------------------------------------------
def render_message(scene_data: dict) -> str:
    """
    Renderiza una escena completa a texto jugable.
    """
    description = scene_data.get("description", "")
    tone = scene_data.get("tone", "neutral")
    emotion = scene_data.get("dominant_emotion", "neutral")

    return render(description, tone=tone, emotion=emotion)
