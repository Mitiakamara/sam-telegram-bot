# ============================================================
# SAM - Storytelling Adventure Machine
# Render Deployment (Standalone - Remote APIs)
# ============================================================

import os
import sys
import asyncio
import logging
from contextlib import suppress
from dotenv import load_dotenv
from fastapi import FastAPI
import uvicorn

from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
)

# ------------------------------------------------------------
# üîß CONFIG
# ------------------------------------------------------------
load_dotenv()

BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN", "")
GAME_API_URL = os.getenv("GAME_API_URL", "https://sam-gameapi.onrender.com")
SRD_SERVICE_URL = os.getenv("SRD_SERVICE_URL", "https://sam-srdservice.onrender.com")
PORT = int(os.getenv("PORT", "10000"))

logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO,
)
log = logging.getLogger("SAM")

# ------------------------------------------------------------
# üß† SAM CORE
# ------------------------------------------------------------
from core.orchestrator import Orchestrator

sam = Orchestrator(gameapi_url=GAME_API_URL, srdservice_url=SRD_SERVICE_URL)
sam.reset_world()

# ------------------------------------------------------------
# ü§ñ TELEGRAM HANDLERS
# ------------------------------------------------------------
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üé≤ ¬°Bienvenido a *SAM*!\n"
        "Tu narrador est√° listo. Usa /begin para iniciar una nueva aventura.",
        parse_mode="Markdown",
    )

async def begin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    sam.reset_world()
    scene = sam.get_state().get("scene", {})
    await update.message.reply_text(
        f"‚ú® *Aventura iniciada*\n\nüèûÔ∏è {scene.get('title','Inicio')}\n{scene.get('description','...')}",
        parse_mode="Markdown",
    )

async def help_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üìú *Comandos disponibles:*\n"
        "/begin ‚Äì Nueva aventura\n"
        "/reset ‚Äì Reiniciar mundo\n"
        "/state ‚Äì Mostrar estado actual\n"
        "/help ‚Äì Mostrar esta ayuda",
        parse_mode="Markdown",
    )

async def reset(update: Update, context: ContextTypes.DEFAULT_TYPE):
    sam.reset_world()
    await update.message.reply_text("‚ôªÔ∏è Mundo reiniciado. ¬°Nuevo comienzo!", parse_mode="Markdown")

async def show_state(update: Update, context: ContextTypes.DEFAULT_TYPE):
    state = sam.get_state()
    scene = state.get("scene", {})
    emotion = state.get("emotion", {})
    await update.message.reply_text(
        f"üèûÔ∏è Escena: {scene.get('title','-')}\n"
        f"üé≠ Tono: {emotion.get('tone','neutral')}\n"
        f"üí´ Intensidad: {emotion.get('intensity',0)}",
        parse_mode="Markdown",
    )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_input = update.message.text.strip()
    try:
        response = sam.process_player_action(user_input)
        scene = response.get("scene", {})
        emotion = response.get("emotion", {})
        await update.message.reply_text(
            f"üé¨ *{scene.get('title','Escena')}*\n{scene.get('description','...')}\n\n"
            f"üé≠ {emotion.get('tone','neutral')} ({emotion.get('intensity',0)})",
            parse_mode="Markdown",
        )
    except Exception as e:
        log.error(f"[Error Narrativo] {e}")
        await update.message.reply_text("‚ö†Ô∏è El narrador tuvo un error interno.")

# ------------------------------------------------------------
# üß© BUILD TELEGRAM APP
# ------------------------------------------------------------
def build_bot():
    app = ApplicationBuilder().token(BOT_TOKEN).concurrent_updates(True).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("begin", begin))
    app.add_handler(CommandHandler("help", help_cmd))
    app.add_handler(CommandHandler("reset", reset))
    app.add_handler(CommandHandler("state", show_state))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    return app

# ------------------------------------------------------------
# üåê FASTAPI: Health endpoint para Render
# ------------------------------------------------------------
api = FastAPI(title="SAM Health API")

@api.get("/health")
def health():
    return {"status": "ok", "service": "SAM", "gameapi": GAME_API_URL, "srd": SRD_SERVICE_URL}

# ------------------------------------------------------------
# üöÄ MAIN LOOP
# ------------------------------------------------------------
async def main():
    log.info("ü§ñ Iniciando SAM (modo remoto)")
    bot_app = build_bot()

    async def run_bot():
        await bot_app.initialize()
        await bot_app.start()
        await bot_app.updater.start_polling(drop_pending_updates=True)
        log.info("‚úÖ Bot Telegram activo.")
        await bot_app.wait_until_shutdown()

    async def run_fastapi():
        config = uvicorn.Config(api, host="0.0.0.0", port=PORT, log_level="info")
        server = uvicorn.Server(config)
        await server.serve()

    # Ejecuta bot y API /health en paralelo
    await asyncio.gather(run_bot(), run_fastapi())

# ------------------------------------------------------------
# ‚ñ∂Ô∏è ENTRY POINT
# ------------------------------------------------------------
if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\nüõë SAM detenido manualmente")
    except Exception as e:
        log.exception(f"üí• Error cr√≠tico en SAM: {e}")
        sys.exit(1)
